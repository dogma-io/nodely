// @flow

import type {Argv} from "./types";
import {IDLE, IdleAction, REMOVE_FILE, TRANSFORM_FILE} from "./actions";
import {sep} from "path";
import {cpus} from "os";
import watch from "node-watch";
import glob from "glob";
declare class Class0 extends events$EventEmitter {

  id: number;
  process: child_process$ChildProcess;
  suicide: boolean;
  disconnect(): void;
  isConnected(): boolean;
  isDead(): boolean;
  kill(signal?: string): void;
  send(message: Object, sendHandleOrCallback?: any | Function, callback?: Function): boolean;
}
declare export default function(argv: $Exact<{include: ?string, output: string, source: string, target: string, verbose: boolean, watch: boolean, workerCount: number}>, fork: () => Class0, on: (event: string, listener: (worker: Class0) => void) => mixed): $Exact<{erred: boolean, isWatching: boolean, queue: Array<$Exact<{filePath: string, type: "REMOVE_FILE" | "TRANSFORM_FILE"}>>, verbose: boolean, workers: Array<$Exact<{idle: boolean, worker: Class0}>>}>;

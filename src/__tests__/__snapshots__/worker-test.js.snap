// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config is invalid JSON should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [SyntaxError: Unexpected end of JSON input],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read JSON Babel config should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config is invalid JSON should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [SyntaxError: Unexpected end of JSON input],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read JSON Babel config should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config is invalid JSON should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [SyntaxError: Unexpected end of JSON input],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read JSON Babel config should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config is invalid JSON should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [SyntaxError: Unexpected end of JSON input],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read JSON Babel config should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when not verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config is invalid JSON should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [SyntaxError: Unexpected end of JSON input],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read JSON Babel config should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when neither output nor source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config is invalid JSON should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [SyntaxError: Unexpected end of JSON input],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read JSON Babel config should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output and source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config is invalid JSON should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [SyntaxError: Unexpected end of JSON input],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read JSON Babel config should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when output has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config is invalid JSON should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [SyntaxError: Unexpected end of JSON input],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when JSON Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when Javascript Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read JSON Babel config should function as expected 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction],
  "processSend": [MockFunction],
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "<PROJECT_ROOT>/.babelrc.json",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when fails to read files to look for Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file should skip CSS files 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a JSON file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument allows Javascript and JSON when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set functions as expected 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction],
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set functions as expected when master sends message with unknown action type 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Master sent message with unknown action type FOO_BAR",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set functions as expected when master sends non-object message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be an object but instead received type string",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set functions as expected when master sends null message 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Expected message from master to be present but instead received null",
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when fails to remove file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to remove file /bar/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to remove file functions as expected when successfully removes file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction],
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file functions as expected when it fails to create directory for file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to create directory /bar/alpha],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file functions as expected when file is actually a directory 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file functions as expected when it fails to read source file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to get contents of file /foo/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it fails to get stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file functions as expected when it fails to transform file contents 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to transform /foo/alpha/bravo.js",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it fails to write transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.js",
      ],
      Array [
        [Error: Failed to write file /bar/alpha/bravo.js],
      ],
    ],
  },
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is a Javascript file when it successfully reads source file when it successfully gets stats for file when it succssfully transforms file contents functions as expected when it successfully writes transformed contents to file 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction],
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.js",
        "utf8",
        [Function],
      ],
    ],
  },
  "transform": [MockFunction] {
    "calls": Array [
      Array [
        "blah blah blah",
        Object {
          "filename": "/foo/alpha/bravo.js",
          "presets": Array [
            Array [
              "@babel/env",
              Object {
                "targets": Object {
                  "node": "6",
                },
              },
            ],
            "@babel/flow",
            "@babel/react",
          ],
        },
        [Function],
      ],
    ],
  },
  "writeFile": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.js",
        "blah blah blah",
        Object {
          "encoding": "utf8",
          "mode": 438,
        },
        [Function],
      ],
    ],
  },
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it fails to get stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {},
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when file is successfully copied 1`] = `
Object {
  "consoleError": [MockFunction],
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": false,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create read stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction],
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when it fails to create write stream 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when read stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed reading /foo/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;

exports[`worker when verbose when source has trailing separator when no Babel config when include argument not set when master sends message to transform file when it successfully creates directory for file when file is not a Javascript file when it successfully gets stats for file functions as expected when write stream receives an error 1`] = `
Object {
  "consoleError": [MockFunction] {
    "calls": Array [
      Array [
        "Failed writing /bar/alpha/bravo.json",
      ],
      Array [
        "Failed to process file /foo/alpha/bravo.json",
      ],
      Array [
        [Error: foo bar],
      ],
    ],
  },
  "createReadStream": [MockFunction] {
    "calls": Array [
      Array [
        "/foo/alpha/bravo.json",
      ],
    ],
  },
  "createWriteStream": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha/bravo.json",
        Object {
          "mode": 438,
        },
      ],
    ],
  },
  "mkdirp": [MockFunction] {
    "calls": Array [
      Array [
        "/bar/alpha",
        [Function],
      ],
    ],
  },
  "processOn": [MockFunction] {
    "calls": Array [
      Array [
        "message",
        [Function],
      ],
    ],
  },
  "processSend": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "erred": true,
          "type": "IDLE",
        },
      ],
    ],
  },
  "readFile": [MockFunction],
  "transform": [MockFunction],
  "writeFile": [MockFunction],
}
`;
